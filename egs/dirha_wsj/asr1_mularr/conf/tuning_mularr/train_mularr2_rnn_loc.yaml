# network architecture (multi-array)
num-encs: 2
model-module: "espnet.nets.pytorch_backend.e2e_asr_mulenc:E2E"
# encoder related
etype: [ vggblstmp, vggblstmp ]     # encoder architecture type
elayers: [ 2, 2 ]
eunits: [ 320, 320 ]
eprojs: 320
subsample: [ "1_2_2_1_1", "1_2_2_1_1" ] # skip every n frame from input to nth layers
# decoder related
dlayers: 1
dunits: 300
# attention related
atype: [ location, location ]
adim: [ 320, 320 ]
awin: [ 5, 5 ]
aheads: [ 4, 4 ]
aconv-chans: [ 10, 10 ]
aconv-filts: [ 100, 100 ]

# hierarchical attention network (han)
han-type: location
han-dim: 320
han-win: 5
han-heads: 4
han-conv-chans: 10
han-conv-filts: 100

# multi-ctc related
share-ctc: False
weights-ctc-train: [ 0.5, 0.5 ] # ctc weight for each encoder during training
weights-ctc-dec: [ 0.5, 0.5 ] # ctc weight for each encoder during decoding

# hybrid CTC/attention
mtlalpha: 0.2

# label smoothing
lsm-type: unigram
lsm-weight: 0.05

# minibatch related
batch-size: 15
maxlen-in: 800  # if input length  > maxlen_in, batchsize is automatically reduced
maxlen-out: 150 # if output length > maxlen_out, batchsize is automatically reduced

# optimization related
sortagrad: 0 # Feed samples from shortest to longest ; -1: enabled for all epochs, 0: disabled, other: enabled for 'other' epochs
opt: adadelta
epochs: 30
patience: 3

# scheduled sampling option
sampling-probability: 0.0

# misc
problem-utts-file: conf/problem_utts
