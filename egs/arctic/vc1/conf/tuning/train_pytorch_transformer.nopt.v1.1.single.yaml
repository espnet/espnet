# VTN configuration w/o pretraining, using 1 gpu.

# v1.1: use lamb optimizer

# network architecture related
model-module: espnet.nets.pytorch_backend.e2e_vc_transformer:Transformer
eprenet-conv-layers: 0  # one more linear layer w/o non-linear will be added for 0-centor
eprenet-conv-filts: 0
eprenet-conv-chans: 0
dprenet-layers: 2  # one more linear layer w/o non-linear will be added for 0-centor
dprenet-units: 256
adim: 384
aheads: 4
elayers: 6
eunits: 1536
dlayers: 6
dunits: 1536
postnet-layers: 5
postnet-filts: 5
postnet-chans: 256
use-masking: True
bce-pos-weight: 5.0
use-batch-norm: True
use-scaled-pos-enc: True
encoder-normalize-before: False
decoder-normalize-before: False
encoder-concat-after: False
decoder-concat-after: False

reduction-factor: 2
transformer-input-layer: conv2d-scaled-pos-enc

# minibatch related
batch-sort-key: input # shuffle or input or output
batch-bins: 3340800 

# training related
transformer-init: pytorch
transformer-warmup-steps: 4000
transformer-lr: 0.1
initial-encoder-alpha: 1.0
initial-decoder-alpha: 1.0
eprenet-dropout-rate: 0.0
dprenet-dropout-rate: 0.5
postnet-dropout-rate: 0.5
transformer-enc-dropout-rate: 0.1
transformer-enc-positional-dropout-rate: 0.1
transformer-enc-attn-dropout-rate: 0.1
transformer-dec-dropout-rate: 0.1
transformer-dec-positional-dropout-rate: 0.1
transformer-dec-attn-dropout-rate: 0.1
transformer-enc-dec-attn-dropout-rate: 0.1
use-guided-attn-loss: true
num-heads-applied-guided-attn: 2
num-layers-applied-guided-attn: 2
modules-applied-guided-attn: ["encoder-decoder"]
guided-attn-loss-lambda: 10

# optimization related
opt: lamb
lr: 0.001
accum-grad: 2
grad-clip: 1.0
weight-decay: 0.0
patience: 0
epochs: 4000

# other
save-interval-epoch: 100
eval-interval-epoch: 100
