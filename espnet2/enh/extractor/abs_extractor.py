from abc import ABC, abstractmethod
from collections import OrderedDict
from typing import Dict, Optional, Tuple

import torch


class AbsExtractor(torch.nn.Module, ABC):
    """
    Abstract base class for feature extractors in the ESPnet2 framework.

This class defines the interface for all feature extractors that are 
implemented in the ESPnet2 speech enhancement toolkit. Subclasses must 
provide a concrete implementation of the `forward` method, which 
processes input tensors and returns extracted features along with 
additional metadata.

Attributes:
    None

Args:
    input (torch.Tensor): The input tensor containing the features to be 
        processed.
    ilens (torch.Tensor): A tensor containing the lengths of the input 
        sequences.
    input_aux (torch.Tensor): An auxiliary input tensor, if needed for 
        processing.
    ilens_aux (torch.Tensor): A tensor containing the lengths of the 
        auxiliary input sequences.
    suffix_tag (str, optional): An optional suffix tag to be used in the 
        processing, default is an empty string.
    additional (Optional[Dict], optional): A dictionary of additional 
        parameters that can be passed to the extractor, default is None.

Returns:
    Tuple[Tuple[torch.Tensor], torch.Tensor, OrderedDict]: A tuple 
        containing:
        - A tuple of torch.Tensor objects representing the extracted 
          features.
        - A tensor containing additional output, such as attention weights.
        - An OrderedDict with additional metadata about the extraction 
          process.

Raises:
    NotImplementedError: If the `forward` method is not implemented in 
    a subclass.

Examples:
    # Example of a subclass implementing the forward method
    class MyExtractor(AbsExtractor):
        def forward(self, input, ilens, input_aux, ilens_aux, 
                    suffix_tag="", additional=None):
            # Implementation of feature extraction
            pass

Note:
    This is an abstract class and cannot be instantiated directly.
    """
    @abstractmethod
    def forward(
        self,
        input: torch.Tensor,
        ilens: torch.Tensor,
        input_aux: torch.Tensor,
        ilens_aux: torch.Tensor,
        suffix_tag: str = "",
        additional: Optional[Dict] = None,
    ) -> Tuple[Tuple[torch.Tensor], torch.Tensor, OrderedDict]:
        """
        Computes the forward pass of the extractor model.

    This method processes the input tensors and produces the desired output 
    tensors along with an ordered dictionary containing additional information 
    relevant to the model's operation.

    Args:
        input (torch.Tensor): The primary input tensor to the model.
        ilens (torch.Tensor): A tensor containing the lengths of the input sequences.
        input_aux (torch.Tensor): An auxiliary input tensor for additional data.
        ilens_aux (torch.Tensor): A tensor containing the lengths of the auxiliary 
            input sequences.
        suffix_tag (str, optional): An optional suffix tag for naming or 
            categorization purposes. Defaults to an empty string.
        additional (Optional[Dict], optional): A dictionary for any additional 
            parameters or settings needed for the forward computation. Defaults 
            to None.

    Returns:
        Tuple[Tuple[torch.Tensor], torch.Tensor, OrderedDict]: A tuple containing:
            - A tuple of output tensors generated by the model.
            - A tensor containing the final output features.
            - An OrderedDict with additional information about the processing.

    Raises:
        NotImplementedError: If the method is not overridden in a subclass.

    Examples:
        # Example usage of the forward method
        model = SomeConcreteExtractor()  # Some subclass of AbsExtractor
        input_tensor = torch.randn(10, 20)  # Example input tensor
        ilens_tensor = torch.tensor([20] * 10)  # Lengths of the input sequences
        input_aux_tensor = torch.randn(10, 15)  # Example auxiliary input tensor
        ilens_aux_tensor = torch.tensor([15] * 10)  # Lengths of the auxiliary inputs
        suffix = "example"
        additional_params = {"param1": "value1"}

        output, final_features, info = model.forward(
            input_tensor,
            ilens_tensor,
            input_aux_tensor,
            ilens_aux_tensor,
            suffix,
            additional_params
        )
        """
        raise NotImplementedError
