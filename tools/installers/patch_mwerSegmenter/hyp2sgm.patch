*** /home/inaguma/tool/mwerSegmenter/hyp2sgm.py	2010-09-22 17:37:14.000000000 +0900
--- hyp2sgm.py	2021-01-29 18:49:18.480854101 +0900
***************
*** 1,4 ****
! #!/usr/bin/env python
  
  import sys
  from sgmllib import SGMLParser
--- 1,4 ----
! #!/usr/bin/env python2
  
  import sys
  from sgmllib import SGMLParser
***************
*** 8,16 ****
--- 8,18 ----
  debugPrint = sys.stderr.write
  verbosePrint = sys.stderr.write
  
+ 
  def normalize(reference):
      return reference.replace("#", "\\#").replace("\n", " ").strip()
  
+ 
  class SGMLRefParser(SGMLParser):
      def __init__(self, sysid, targetLanguage, fpIn, fpOut, verbose):
          SGMLParser.__init__(self)
***************
*** 19,25 ****
          self.fpIn = fpIn
          self.fpOut = fpOut
          self.verbose = verbose
!         
      def __writeAttributes(self, attributes):
          for (attr, value) in attributes:
              self.fpOut.write(" %s=\"%s\"" % (attr, value))
--- 21,27 ----
          self.fpIn = fpIn
          self.fpOut = fpOut
          self.verbose = verbose
! 
      def __writeAttributes(self, attributes):
          for (attr, value) in attributes:
              self.fpOut.write(" %s=\"%s\"" % (attr, value))
***************
*** 58,69 ****
          self.__setAttribute(attributes, "sysid", self.sysid)
          self.__writeAttributes(attributes)
          self.fpOut.write(">\n")
!         
      def start_hl(self, attributes):
          if self.verbose:
              verbosePrint("start_hl\n")
          self.fpOut.write("<hl>\n")
!     
      def start_p(self, attributes):
          if self.verbose:
              verbosePrint("start_p\n")
--- 60,71 ----
          self.__setAttribute(attributes, "sysid", self.sysid)
          self.__writeAttributes(attributes)
          self.fpOut.write(">\n")
! 
      def start_hl(self, attributes):
          if self.verbose:
              verbosePrint("start_hl\n")
          self.fpOut.write("<hl>\n")
! 
      def start_p(self, attributes):
          if self.verbose:
              verbosePrint("start_p\n")
***************
*** 87,93 ****
      def end_p(self):
          if self.verbose:
              verbosePrint("end_p\n")
!         self.fpOut.write("</p>\n")            
  
      def end_srcset(self):
          if self.verbose:
--- 89,95 ----
      def end_p(self):
          if self.verbose:
              verbosePrint("end_p\n")
!         self.fpOut.write("</p>\n")
  
      def end_srcset(self):
          if self.verbose:
***************
*** 105,117 ****
              verbosePrint("end_seg\n")
          self.fpOut.write("</seg>\n")
  
  def main():
      usage = "usage: %prog [options] [sgmfile]"
      optionParser = optparse.OptionParser(usage=usage)
!     optionParser.add_option("-o", "--out", metavar="file", dest="outFilename", help="output file")
      optionParser.add_option("--id", metavar="sysid", dest="sysid", help="system id")
!     optionParser.add_option("-s", "--source", metavar="sgmfile", dest="sourceFilename", help="Source file")
!     optionParser.add_option("-l", "--targetLang", metavar="language", dest="targetLanguage", help="Set target language")
      optionParser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                              help="write every step to stderr, useful for finding errors in sgml files")
  
--- 107,123 ----
              verbosePrint("end_seg\n")
          self.fpOut.write("</seg>\n")
  
+ 
  def main():
      usage = "usage: %prog [options] [sgmfile]"
      optionParser = optparse.OptionParser(usage=usage)
!     optionParser.add_option("-o", "--out", metavar="file",
!                             dest="outFilename", help="output file")
      optionParser.add_option("--id", metavar="sysid", dest="sysid", help="system id")
!     optionParser.add_option("-s", "--source", metavar="sgmfile",
!                             dest="sourceFilename", help="Source file")
!     optionParser.add_option("-l", "--targetLang", metavar="language",
!                             dest="targetLanguage", help="Set target language")
      optionParser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                              help="write every step to stderr, useful for finding errors in sgml files")
  
***************
*** 125,139 ****
      else:
          try:
              fpIn = open(args[0])
!         except IOError, ioError:
!             optionParser.error("couldn't open %s, %s" % (args[0], ioError[1]))
  
      if not options.sourceFilename:
          optionParser.error("a source filename should be given")
      try:
          fpSource = open(options.sourceFilename)
!     except IOError, ioError:
!         optionParser.error("couldn't open %s, %s" % (args[0], ioError[1]))
  
      if not options.targetLanguage:
          optionParser.error("a target language should be given")
--- 131,145 ----
      else:
          try:
              fpIn = open(args[0])
!         except IOError:
!             optionParser.error("couldn't open %s, %s" % (args[0]))
  
      if not options.sourceFilename:
          optionParser.error("a source filename should be given")
      try:
          fpSource = open(options.sourceFilename)
!     except IOError:
!         optionParser.error("couldn't open %s, %s" % (args[0]))
  
      if not options.targetLanguage:
          optionParser.error("a target language should be given")
***************
*** 146,156 ****
      else:
          try:
              fpOut = open(options.outFilename, "w")
!         except IOError, ioError:
!             optionParser.error("couldn't open %s for writing, %s" % (options.outFilename, ioError[1]))
  
!     parser = SGMLRefParser(options.sysid, options.targetLanguage, fpIn, fpOut, options.verbose)
      parser.feed(fpSource.read())
!     
  if __name__ == "__main__":
      main()
--- 152,165 ----
      else:
          try:
              fpOut = open(options.outFilename, "w")
!         except IOError:
!             optionParser.error("couldn't open %s for writing, %s" %
!                                (options.outFilename))
  
!     parser = SGMLRefParser(options.sysid, options.targetLanguage,
!                            fpIn, fpOut, options.verbose)
      parser.feed(fpSource.read())
! 
! 
  if __name__ == "__main__":
      main()
