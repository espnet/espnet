# This EXPERIMENTAL configuration is for ESPnet2 to finetune
# Conformer FastSpeech2 + HiFiGAN vocoder jointly. To run
# this config, you need to specify "--tts_task gan_tts"
# option for tts.sh at least and use 22050 hz audio as the
# training data (mainly tested on LJspeech).
# This configuration tested on 4 GPUs with 12GB GPU memory.
# It takes around less than 1 week to finish the training but
# 100k iters model should generate reasonable results.

# YOU NEED TO MODIFY THE "*_params" AND "init_param" SECTIONS
# IF YOU WANT TO USE YOUR OWN PRETRAINED MODLES.

##########################################################
#                  TTS MODEL SETTING                     #
##########################################################
tts: joint_text2wav
tts_conf:
    # copied from pretrained model's config.yaml
    text2mel_type: fastspeech2
    text2mel_params:
        adim: 384
        aheads: 2
        conformer_activation_type: swish
        conformer_dec_kernel_size: 31
        conformer_enc_kernel_size: 7
        conformer_pos_enc_layer_type: rel_pos
        conformer_self_attn_layer_type: rel_selfattn
        decoder_normalize_before: false
        decoder_type: conformer
        dlayers: 4
        dunits: 1536
        duration_predictor_chans: 256
        duration_predictor_kernel_size: 3
        duration_predictor_layers: 2
        elayers: 4
        encoder_normalize_before: false
        encoder_type: conformer
        energy_embed_dropout: 0.0
        energy_embed_kernel_size: 1
        energy_predictor_chans: 256
        energy_predictor_dropout: 0.5
        energy_predictor_kernel_size: 3
        energy_predictor_layers: 2
        eunits: 1536
        init_type: xavier_uniform
        pitch_embed_dropout: 0.0
        pitch_embed_kernel_size: 1
        pitch_predictor_chans: 256
        pitch_predictor_dropout: 0.5
        pitch_predictor_kernel_size: 5
        pitch_predictor_layers: 5
        positionwise_conv_kernel_size: 3
        positionwise_layer_type: conv1d
        postnet_chans: 256
        postnet_filts: 5
        postnet_layers: 5
        reduction_factor: 1
        stop_gradient_from_energy_predictor: false
        stop_gradient_from_pitch_predictor: true
        transformer_dec_attn_dropout_rate: 0.2
        transformer_dec_dropout_rate: 0.2
        transformer_dec_positional_dropout_rate: 0.2
        transformer_enc_attn_dropout_rate: 0.2
        transformer_enc_dropout_rate: 0.2
        transformer_enc_positional_dropout_rate: 0.2
        use_cnn_in_conformer: true
        use_macaron_style_in_conformer: true
        use_masking: true

    # copied from pretrained vocoder's config.yaml
    vocoder_type: hifigan_generator
    vocoder_params:
        bias: true
        channels: 512
        in_channels: 80
        kernel_size: 7
        nonlinear_activation: LeakyReLU
        nonlinear_activation_params:
            negative_slope: 0.1
        out_channels: 1
        resblock_dilations:
        - - 1
          - 3
          - 5
        - - 1
          - 3
          - 5
        - - 1
          - 3
          - 5
        resblock_kernel_sizes:
        - 3
        - 7
        - 11
        upsample_kernel_sizes:
        - 16
        - 16
        - 4
        - 4
        upsample_scales:
        - 8
        - 8
        - 2
        - 2
        use_additional_convs: true
        use_weight_norm: true

    # copied from pretrained vocoder's config.yaml
    discriminator_type: hifigan_multi_scale_multi_period_discriminator
    discriminator_params:
        follow_official_norm: true
        period_discriminator_params:
            bias: true
            channels: 32
            downsample_scales:
            - 3
            - 3
            - 3
            - 3
            - 1
            in_channels: 1
            kernel_sizes:
            - 5
            - 3
            max_downsample_channels: 1024
            nonlinear_activation: LeakyReLU
            nonlinear_activation_params:
                negative_slope: 0.1
            out_channels: 1
            use_spectral_norm: false
            use_weight_norm: true
        periods:
        - 2
        - 3
        - 5
        - 7
        - 11
        scale_discriminator_params:
            bias: true
            channels: 128
            downsample_scales:
            - 4
            - 4
            - 4
            - 4
            - 1
            in_channels: 1
            kernel_sizes:
            - 15
            - 41
            - 5
            - 3
            max_downsample_channels: 1024
            max_groups: 16
            nonlinear_activation: LeakyReLU
            nonlinear_activation_params:
                negative_slope: 0.1
            out_channels: 1
        scale_downsample_pooling: AvgPool1d
        scale_downsample_pooling_params:
            kernel_size: 4
            padding: 2
            stride: 2
        scales: 3

    # loss function related
    generator_adv_loss_params:
        average_by_discriminators: false # whether to average loss value by #discriminators
        loss_type: mse                   # loss type, "mse" or "hinge"
    discriminator_adv_loss_params:
        average_by_discriminators: false # whether to average loss value by #discriminators
        loss_type: mse                   # loss type, "mse" or "hinge"
    use_feat_match_loss: true            # whether to use feat match loss
    feat_match_loss_params:
        average_by_discriminators: false # whether to average loss value by #discriminators
        average_by_layers: false         # whether to average loss value by #layers of each discriminator
        include_final_outputs: true      # whether to include final outputs for loss calculation
    use_mel_loss: true     # whether to use mel-spectrogram loss
    mel_loss_params:
        fs: 22050          # must be the same as the training data
        n_fft: 1024        # fft points
        hop_length: 256    # hop size
        win_length: null   # window length
        window: hann       # window type
        n_mels: 80         # number of Mel basis
        fmin: 0            # minimum frequency for Mel basis
        fmax: null         # maximum frequency for Mel basis
        log_base: null     # null represent natural log
    lambda_text2mel: 1.0   # loss scaling coefficient for text2mel loss
    lambda_adv: 1.0        # loss scaling coefficient for adversarial loss
    lambda_mel: 45.0       # loss scaling coefficient for Mel loss
    lambda_feat_match: 2.0 # loss scaling coefficient for feat match loss

    # others
    sampling_rate: 22050          # needed in the inference for saving wav
    segment_size: 32              # segment size for random windowed discriminator
    cache_generator_outputs: true # whether to cache generator outputs in the training

# extra module for additional inputs
pitch_extract: dio           # pitch extractor type
pitch_extract_conf:
    reduction_factor: 1
pitch_normalize: global_mvn  # normalizer for the pitch feature
energy_extract: energy       # energy extractor type
energy_extract_conf:
    reduction_factor: 1
energy_normalize: global_mvn # normalizer for the energy feature

# initialization (might need to modify for your own pretrained model)
init_param:
- exp/tts_train_conformer_fastspeech2_raw_phn_tacotron_g2p_en_no_space/train.loss.ave_5best.pth:tts:tts.generator.text2mel
- exp/ljspeech_hifigan.v1/generator.pth::tts.generator.vocoder
- exp/ljspeech_hifigan.v1/discriminator.pth::tts.discriminator

##########################################################
#            OPTIMIZER & SCHEDULER SETTING               #
##########################################################
# optimizer setting for generator
optim: adam
optim_conf:
    lr: 1.25e-5
    betas: [0.5, 0.9]
    weight_decay: 0.0
scheduler: exponentiallr
scheduler_conf:
    gamma: 0.999875
# optimizer setting for discriminator
optim2: adam
optim2_conf:
    lr: 1.25e-5
    betas: [0.5, 0.9]
    weight_decay: 0.0
scheduler2: exponentiallr
scheduler2_conf:
    gamma: 0.999875
generator_first: true # whether to start updating generator first

##########################################################
#                OTHER TRAINING SETTING                  #
##########################################################
num_iters_per_epoch: 1000 # number of iterations per epoch
max_epoch: 500            # number of epochs
accum_grad: 1             # gradient accumulation
batch_bins: 5000000       # batch bins (feats_type=raw)
batch_type: numel         # how to make batch
grad_clip: -1             # gradient clipping norm
grad_noise: false         # whether to use gradient noise injection
sort_in_batch: descending # how to sort data in making batch
sort_batch: descending    # how to sort created batches
num_workers: 4            # number of workers of data loader
use_amp: false            # whether to use pytorch amp
log_interval: 50          # log interval in iterations
keep_nbest_models: 5      # number of models to keep
num_att_plot: 3           # number of attention figures to be saved in every check
seed: 777                 # random seed number
patience: null            # patience for early stopping
unused_parameters: true   # needed for multi gpu case
best_model_criterion:     # criterion to save the best models
-   - valid
    - text2mel_loss
    - min
-   - train
    - text2mel_loss
    - min
-   - train
    - total_count
    - max
cudnn_deterministic: false # setting to false accelerates the training speed but makes it non-deterministic
                           # in the case of GAN-TTS training, we strongly recommend setting to false
cudnn_benchmark: false     # setting to true might acdelerate the training speed but sometimes decrease it
                           # therefore, we set to false as a default (recommend trying both cases)
