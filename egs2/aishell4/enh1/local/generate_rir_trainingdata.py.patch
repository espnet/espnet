--- /Users/wyz/Downloads/generate_rir_trainingdata.old.py	2022-03-25 19:13:20.000000000 +0800
+++ /Users/wyz/Downloads/generate_rir_trainingdata.new.py	2022-03-26 22:31:53.000000000 +0800
@@ -13,6 +13,7 @@
 import os
 
 def run(args):
+    np.random.seed(args.seed)
     if not os.path.exists(args.output_dir):
         os.makedirs(args.output_dir)
     c = 340
@@ -25,11 +26,31 @@
     nb_src = 3  # Number of sources
     nb_rcv = 8 # Number of receivers
 
-    for i in range(num_room):
+    if args.idx < 1 or args.nj < 1 or args.idx > args.nj:
+        raise ValueError("Invalid arguments for multi-processing")
+
+    num = math.ceil(num_room / args.nj)
+    start = (args.idx - 1) * num
+    if args.idx < args.nj:
+        stop = start + num
+    else:
+        stop = num_room
+
+    print('Simulate RIRs from %d to %d\n' % (start, stop))
+    unique_rooms = []
+    for i in range(stop):
         x = np.random.uniform(3, room_x)
         y = np.random.uniform(3, room_y)
         z = room_z
-        for j in range(utt_per_room):
+        room_stats = ('%.2f' % x) + '_' + ('%.2f' % y) + '_' + ('%.2f' % z)
+        while room_stats in unique_rooms:
+            x = np.random.uniform(3, room_x)
+            y = np.random.uniform(3, room_y)
+            room_stats = ('%.2f' % x) + '_' + ('%.2f' % y) + '_' + ('%.2f' % z)
+        unique_rooms.append(room_stats)
+
+        j = 0
+        while j < utt_per_room:
             mic_distance = 0.05
             room_sz = [x, y, z]  # Size of the room [m]
             pos_src1 = [np.random.uniform(0, x),np.random.uniform(0, y),np.random.uniform(1.2, 1.9)]
@@ -55,21 +76,6 @@
             mic_pattern = "omnidirectional" # Receiver polar pattern
             T60 = np.random.uniform(0.2, 0.8)    # Time for the RIR to reach 60dB of attenuation [s]
 
-            RIRs1 = pyrirgen.generateRir(room_sz, pos_src1, pos_rcv, soundVelocity=c, fs=fs, reverbTime = T60, nSamples = 8000, 
-                                        micType = mic_pattern, nOrder=-1, nDim=3, isHighPassFilter=True) #source * mic * time
-            RIRs2 = pyrirgen.generateRir(room_sz, pos_src2, pos_rcv, soundVelocity=c, fs=fs, reverbTime = T60, nSamples = 8000, 
-                                        micType = mic_pattern, nOrder=-1, nDim=3, isHighPassFilter=True) #source * mic * time
-            RIRs3 = pyrirgen.generateRir(room_sz, pos_src3, pos_rcv, soundVelocity=c, fs=fs, reverbTime = T60, nSamples = 8000, 
-                                        micType = mic_pattern, nOrder=-1, nDim=3, isHighPassFilter=True) #source * mic * time
-            RIRs1=np.array(RIRs1)
-            RIRs2=np.array(RIRs2)
-            RIRs3=np.array(RIRs3)
-            
-            out = np.zeros([24, 8000])
-            out[0:8]= RIRs1
-            out[8:16]= RIRs2
-            out[16:24]= RIRs3
-            out = out.transpose(1,0)
             pos_src = np.array(pos_src1)
             pos_src2 = np.array(pos_src2)
             pos_src3 = np.array(pos_src3)
@@ -89,17 +95,50 @@
             matrix_1m = np.array([0.5, 0.5, 0.5])
             matrix_5m = np.array([5.0, 5.0, 5.0])
             if (distance>matrix_1m).all() and (distance<matrix_5m).all() and abs(angle[1] - angle[0])>20.0 and abs(angle[2] - angle[0])>20.0 and abs(angle[2] - angle[1])>20.0:
+                j += 1
+                if i < start:
+                    # Skip the actual simulation util it reachs the index range of the current process.
+                    # This is to ensure that the generated data is consistent when using a different number of processes.
+                    continue
                 wav_name = args.output_dir+'/' + \
                            ('%.2f' % x) + '_' + ('%.2f' % y) + '_' + ('%.2f' % z) + '_' + \
                            ('%.2f' % distance[0]) + '_' + ('%.2f' % distance[1]) + '_' + \
                            ('%.4f' % angle[0]) + '_' + ('%.4f' % angle[1])+ '_' + ('%.4f' % T60) + '.wav'
+
+                RIRs1 = pyrirgen.generateRir(room_sz, pos_src1, pos_rcv, soundVelocity=c, fs=fs, reverbTime = T60, nSamples = 8000, 
+                                        micType = mic_pattern, nOrder=-1, nDim=3, isHighPassFilter=True) #source * mic * time
+                RIRs2 = pyrirgen.generateRir(room_sz, pos_src2, pos_rcv, soundVelocity=c, fs=fs, reverbTime = T60, nSamples = 8000, 
+                                            micType = mic_pattern, nOrder=-1, nDim=3, isHighPassFilter=True) #source * mic * time
+                RIRs3 = pyrirgen.generateRir(room_sz, pos_src3, pos_rcv, soundVelocity=c, fs=fs, reverbTime = T60, nSamples = 8000, 
+                                            micType = mic_pattern, nOrder=-1, nDim=3, isHighPassFilter=True) #source * mic * time
+                RIRs1=np.array(RIRs1)
+                RIRs2=np.array(RIRs2)
+                RIRs3=np.array(RIRs3)
+                
+                out = np.zeros([24, 8000])
+                out[0:8]= RIRs1
+                out[8:16]= RIRs2
+                out[16:24]= RIRs3
+                out = out.transpose(1,0)
+
                 sf.write(wav_name,out,16000)
 
+
 if __name__ == '__main__':
     parser = argparse.ArgumentParser()
+    parser.add_argument("idx",
+                        type=int,
+                        help="index of the current process (from 1 to `nj`)")
+    parser.add_argument("nj",
+                        type=int,
+                        help="total number of parallel processes")
     parser.add_argument("--output_dir",
                         type=str,
                         help="output_dir",
                         default="rir")
+    parser.add_argument("--seed",
+                        type=int,
+                        help="random seed",
+                        default=1)
     args = parser.parse_args()
     run(args)
