--- generate_fe_trainingdata.old.py
+++ generate_fe_trainingdata.new.py
@@ -1,8 +1,8 @@
 #!/usr/bin/env python

-import io
+from packaging.version import parse as V
 import os
-import subprocess
+import sys
 import linecache
 import numpy as np
 import soundfile as sf
@@ -12,6 +12,10 @@
 import librosa
 import argparse

+
+is_py_3_3_plus = V("{}.{}.{}".format(*sys.version_info[:3])) > V("3.3")
+
+
 def get_line_context(file_path, line_number):
     return linecache.getline(file_path, line_number).strip()

@@ -119,7 +123,7 @@
         return data / max_val

 def add_noise(clean, noise, rir, snr):
-    random.seed(time.clock())
+    random.seed(time.perf_counter() if is_py_3_3_plus else time.clock())
     if len(noise.shape) == 1 and len(clean.shape) > 1:
         noise = add_reverb(noise, rir[:, 16:24])
         noise = noise[:-7999]
@@ -189,7 +193,7 @@

     for i in range(args.wavnum):

-        random.seed(time.clock())
+        random.seed(time.perf_counter() if is_py_3_3_plus else time.clock())
         wav1idx = random.randint(0, len(open(wavlist1,'r').readlines())-1)
         wav2idx = random.randint(0, len(open(wavlist2,'r').readlines())-1)
         noiseidx = random.randint(0, len(open(noiselist,'r').readlines())-1)
@@ -200,7 +204,7 @@
         noise_path = get_line_context(noiselist, noiseidx+1)
         rir_path = get_line_context(rirlist, riridx+1)
         isotropic_path = get_line_context(isolist, isotropicidx+1)
-        random.seed(time.clock())
+        random.seed(time.perf_counter() if is_py_3_3_plus else time.clock())
         snr = random.uniform(5, 20)
         sir = random.uniform(-5, 5)
         isosnr = random.uniform(15,25)
