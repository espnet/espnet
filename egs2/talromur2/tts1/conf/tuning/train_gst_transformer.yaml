# This configuration is for ESPnet2 to train GST-Transformer-TTS.
# This configuration additionally use the guided attention loss
# to accelerate the learning of the diagonal attention. It requires
# 4 GPUs with 32 GB memory and it will finish within 2 day
# to finish the training on Tesla V100.

##########################################################
#                  TTS MODEL SETTING                     #
##########################################################
tts: transformer           # model architecture
tts_conf:                  # keyword arguments for the selected model
    embed_dim: 0           # embedding dimension in encoder prenet
    eprenet_conv_layers: 0 # number of conv layers in encoder prenet
                           # if set to 0, no encoder prenet will be used
    eprenet_conv_filts: 0  # filter size of conv layers in encoder prenet
    eprenet_conv_chans: 0  # number of channels of conv layers in encoder prenet
    dprenet_layers: 2      # number of layers in decoder prenet
    dprenet_units: 256     # number of units in decoder prenet
    adim: 512              # attention dimension
    aheads: 8              # number of attention heads
    elayers: 6             # number of encoder layers
    eunits: 1024           # number of encoder ff units
    dlayers: 6             # number of decoder layers
    dunits: 1024           # number of decoder ff units
    positionwise_layer_type: conv1d  # type of position-wise layer
    positionwise_conv_kernel_size: 1 # kernel size of position wise conv layer
    postnet_layers: 5                # number of layers of postnset
    postnet_filts: 5                 # filter size of conv layers in postnet
    postnet_chans: 256               # number of channels of conv layers in postnet
    use_gst: true                    # whether to use GST embedding
    gst_heads: 8                     # number of heads in GST multi-head attention
    gst_tokens: 256                  # number of global style tokens
    use_masking: True                # whether to apply masking for padded part in loss calculation
    bce_pos_weight: 5.0              # weight of positive sample in binary cross entropy calculation
    use_scaled_pos_enc: True         # whether to use scaled positional encoding
    encoder_normalize_before: True   # whether to perform layer normalization before the input
    decoder_normalize_before: True   # whether to perform layer normalization before the input
    reduction_factor: 1              # reduction factor
    init_type: xavier_uniform        # initialization type
    init_enc_alpha: 1.0              # initial value of alpha of encoder scaled position encoding
    init_dec_alpha: 1.0              # initial value of alpha of decoder scaled position encoding
    eprenet_dropout_rate: 0.0        # dropout rate for encoder prenet
    dprenet_dropout_rate: 0.5        # dropout rate for decoder prenet
    postnet_dropout_rate: 0.5        # dropout rate for postnet
    transformer_enc_dropout_rate: 0.1                # dropout rate for transformer encoder layer
    transformer_enc_positional_dropout_rate: 0.1     # dropout rate for transformer encoder positional encoding
    transformer_enc_attn_dropout_rate: 0.1           # dropout rate for transformer encoder attention layer
    transformer_dec_dropout_rate: 0.1                # dropout rate for transformer decoder layer
    transformer_dec_positional_dropout_rate: 0.1     # dropout rate for transformer decoder positional encoding
    transformer_dec_attn_dropout_rate: 0.1           # dropout rate for transformer decoder attention layer
    transformer_enc_dec_attn_dropout_rate: 0.1       # dropout rate for transformer encoder-decoder attention layer
    use_guided_attn_loss: true                       # whether to use guided attention loss
    num_heads_applied_guided_attn: 2                 # number of layers to apply guided attention loss
    num_layers_applied_guided_attn: 2                # number of heads to apply guided attention loss
    modules_applied_guided_attn: ["encoder-decoder"] # modules to apply guided attention loss
    guided_attn_loss_sigma: 0.4                      # sigma in guided attention loss
    guided_attn_loss_lambda: 10.0                    # lambda in guided attention loss

##########################################################
#            OPTIMIZER & SCHEDULER SETTING               #
##########################################################
optim: adam             # optimizer type
optim_conf:             # keyword arguments for selected optimizer
    lr: 1.0             # learning rate
scheduler: noamlr       # scheduler type
scheduler_conf:         # keyword arguments for selected scheduler
    model_size: 512     # model size, a.k.a., attention dimenstion
    warmup_steps: 12000 # the number of warmup steps

##########################################################
#                OTHER TRAINING SETTING                  #
##########################################################
num_iters_per_epoch: 1000   # number of iterations per epoch
max_epoch: 300              # number of epochs
grad_clip: 1.0              # gradient clipping norm
grad_noise: false           # whether to use gradient noise injection
accum_grad: 2               # gradient accumulation
batch_bins: 9000000         # batch bins (for feats_type=raw, *= n_shift / n_mels)
batch_type: numel           # how to make batch
sort_in_batch: descending   # how to sort data in making batch
sort_batch: descending      # how to sort created batches
num_workers: 1              # number of workers of data loader
train_dtype: float32        # dtype in training
log_interval: null          # log interval in iterations
keep_nbest_models: 5        # number of models to keep
num_att_plot: 3             # number of attention figures to be saved in every check
seed: 0                     # random seed number
best_model_criterion:
-   - valid
    - loss
    - min
-   - train
    - loss
    - min
