# Trained with V100 (32 GB) x 1 GPUs for Kmeans2K+nbpe5K. It takes  minutes per epoch.
# BPE-Dropout (https://github.com/google/sentencepiece#subword-regularization-and-bpe-dropout)
src_tokenizer_encode_conf:
    enable_sampling: true    # If set to true, bpe-dropout is used.
    alpha: 0.4
    nbest_size: -1

frontend: embed     # embedding + positional encoding
frontend_conf:
    embed_dim: 512
    positional_dropout_rate: 0.1

specaug: specaug
specaug_conf:
    apply_time_warp: false
    time_warp_window: 5
    time_warp_mode: bicubic
    apply_freq_mask: false
    freq_mask_width_range:
    - 0
    - 10
    num_freq_mask: 0
    apply_time_mask: true
    time_mask_width_ratio_range:
    - 0.
    - 0.05
    num_time_mask: 10

encoder: e_branchformer
encoder_conf:
    output_size: 256
    attention_heads: 4
    attention_layer_type: rel_selfattn
    pos_enc_layer_type: rel_pos
    rel_pos_type: latest
    cgmlp_linear_units: 1024
    cgmlp_conv_kernel: 31
    use_linear_after_conv: false
    gate_activation: identity
    num_blocks: 12
    dropout_rate: 0.1
    positional_dropout_rate: 0.1
    attention_dropout_rate: 0.1
    input_layer: injected_conv1d2
    layer_drop_rate: 0.0
    linear_units: 1024
    positionwise_layer_type: linear
    use_ffn: true
    macaron_ffn: true
    merge_conv_kernel: 31

decoder: transformer
decoder_conf:
    attention_heads: 4
    linear_units: 2048
    num_blocks: 6
    dropout_rate: 0.1
    positional_dropout_rate: 0.1
    self_attention_dropout_rate: 0.1
    src_attention_dropout_rate: 0.1
    layer_drop_rate: 0.0

model: text_injected_discrete_asr
preprocessor: random_text_injected
model_conf:
    ctc_weight: 0.3
    lsm_weight: 0.1
    length_normalized_loss: false
    share_decoder_input_output_embed: false
    share_encoder_decoder_input_embed: false
    injected_text_frequency: 4 # only for fixed.
    injected_text_type: fixed
    # fixed: token repeats injected_text_frequency times
    # mean: token repeats mean times where mean was calculated by CTC-Segmentation.
    # median: token repeats median times where median was calculated by CTC-Segmentation.
    # normal: median: token repeats n times was sampled through normal distribution, where the mean and std was calculated by CTC-Segmentation.

unused_parameters: true
use_amp: true
# num_att_plot: 1
# log_interval: 1000
num_workers: 8
batch_type: text_injected
iterator_type: text_injected
batch_bins: 35000000 # 280000000
accum_grad: 16 # 2
max_epoch: 70
patience: none
init: none
best_model_criterion:
-   - valid
    - acc
    - max
keep_nbest_models: 10

optim: adam
optim_conf:
    lr: 0.001 # 0.006
    weight_decay: 0.000001
scheduler: warmuplr
scheduler_conf:
    warmup_steps: 25000 # 15000
