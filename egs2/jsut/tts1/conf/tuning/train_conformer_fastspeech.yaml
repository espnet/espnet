# This configuration is for ESPnet2 to train Conformer-based
# FastSpeech. It requires only a single GPU with 12 GB memory
# and it takes ~2 days to finish the training on Titan V.

# As a default, we assume that the training is based on knowledge
# distillation, i.e., using teacher model outputs as the target.
# This assumes that we always use feat_type=fbank. If you use
# teacher forcing, please be careful to change batch_bins
# according to feat_type (in default, we use feats_type=raw).

##########################################################
#                  TTS MODEL SETTING                     #
##########################################################
tts: fastspeech       # model architecture
tts_conf:             # keyword arguments for the selected model
    adim: 384         # attention dimension
    aheads: 2         # number of attention heads
    elayers: 6        # number of encoder layers
    eunits: 1536      # number of encoder ff units
    dlayers: 6        # number of decoder layers
    dunits: 1536      # number of decoder ff units
    positionwise_layer_type: conv1d   # type of position-wise layer
    positionwise_conv_kernel_size: 3  # kernel size of position wise conv layer
    duration_predictor_layers: 2      # number of layers of duration predictor
    duration_predictor_chans: 384     # number of channels of duration predictor
    duration_predictor_kernel_size: 3 # filter size of duration predictor
    postnet_layers: 5                 # number of layers of postnset
    postnet_filts: 5                  # filter size of conv layers in postnet
    postnet_chans: 256                # number of channels of conv layers in postnet
    use_masking: True                 # whether to apply masking for padded part in loss calculation
    encoder_normalize_before: True    # whether to perform layer normalization before the input
    decoder_normalize_before: True    # whether to perform layer normalization before the input
    reduction_factor: 1               # reduction factor
    encoder_type: conformer           # encoder type
    decoder_type: conformer           # decoder type
    conformer_pos_enc_layer_type: rel_pos        # conformer positional encoding type
    conformer_self_attn_layer_type: rel_selfattn # conformer self-attention type
    conformer_activation_type: swish             # conformer activation type
    use_macaron_style_in_conformer: true         # whether to use macaron style in conformer
    use_cnn_in_conformer: true                   # whether to use CNN in conformer
    conformer_enc_kernel_size: 7                 # kernel size in CNN module of conformer-based encoder
    conformer_dec_kernel_size: 31                # kernel size in CNN module of conformer-based decoder
    init_type: xavier_uniform                    # initialization type
    init_enc_alpha: 1.0                          # initial value of alpha of encoder scaled position encoding
    init_dec_alpha: 1.0                          # initial value of alpha of decoder scaled position encoding
    transformer_enc_dropout_rate: 0.1            # dropout rate for transformer encoder layer
    transformer_enc_positional_dropout_rate: 0.1 # dropout rate for transformer encoder positional encoding
    transformer_enc_attn_dropout_rate: 0.1       # dropout rate for transformer encoder attention layer
    transformer_dec_dropout_rate: 0.1            # dropout rate for transformer decoder layer
    transformer_dec_positional_dropout_rate: 0.1 # dropout rate for transformer decoder positional encoding
    transformer_dec_attn_dropout_rate: 0.1       # dropout rate for transformer decoder attention layer

##########################################################
#            OPTIMIZER & SCHEDULER SETTING               #
##########################################################
optim: adam            # optimizer type
optim_conf:            # keyword arguments for selected optimizer
    lr: 1.0            # learning rate
scheduler: noamlr      # scheduler type
scheduler_conf:        # keyword arguments for selected scheduler
    model_size: 384    # model size, a.k.a., attention dimension
    warmup_steps: 4000 # the number of warmup steps

##########################################################
#                OTHER TRAINING SETTING                  #
##########################################################
num_iters_per_epoch: 500  # number of iterations per epoch
max_epoch: 1000           # number of epochs
grad_clip: 1.0            # gradient clipping norm
grad_noise: false         # whether to use gradient noise injection
accum_grad: 6             # gradient accumulation
batch_bins: 800000        # batch bins (feats_type=fbank)
batch_type: numel         # how to make batch
sort_in_batch: descending # how to sort data in making batch
sort_batch: descending    # how to sort created batches
num_workers: 1            # number of workers of data loader
train_dtype: float32      # dtype in training
log_interval: null        # log interval in iterations
keep_nbest_models: 5      # number of models to keep
num_att_plot: 3           # number of attention figures to be saved in every check
seed: 0                   # random seed number
best_model_criterion:     # criterion to decide the best models to be saved
-   - valid
    - loss
    - min
-   - train
    - loss
    - min
