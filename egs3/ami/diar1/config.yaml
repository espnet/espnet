recipedir: .
num_device: 1 #${oc.env:N_GPU}
expdir: ${recipedir}/exp/gpu${num_device}
statsdir:  ${recipedir}/exp/stats
seed: 777

parallel:
  env: slurm
  n_workers: 32
  options:
    account: bbjs-delta-cpu
    queue: cpu
    cores: 1
    processes: 4
    memory: 16GB
    walltime: 30:00
    job_extra_directives:
      # - "--gres=gpu:1"
      - "--ntasks-per-node=1"
      - "--cpus-per-task=16"
      - "--output=parallel_log/%j-%x.log"


# put here your path to AMI root folder
ami_root: /raid/users/popcornell/AMI
features:
  num_mel_bins: 23
  chunk_size: 120 # train on 120 seconds. The sequence length will be:
  # 120000 / 10 (stft stride) / 10 (network frontend stride) = 1200. We can probably increase it further !
  hop: 120 # half a second hop for extracting features #FIXME
  # we can apply specaugm in dataloader


#    specaug: specaug
#   specaug_conf:
#      apply_time_warp: true
#      time_warp_window: 5
#      time_warp_mode: bicubic
#      apply_freq_mask: true
#      freq_mask_width_range: [ 0, 4 ]
#      num_freq_mask: 2 # note that we have only 23 mels !
#      apply_time_mask: true
#      time_mask_width: [ 0, 10 ] # 10ms features, 10 would be 100ms
#      num_time_mask: 2000 # this depends on the chunk used for training.
#      # e.g. we use 120 seconds, we can mask 20% maybe: 120000ms / 10ms * 0.2 = 2400
#      # note that this works IFF we use long form data with more than 120 seconds, shorter
#      # data will be all masked.

synth_multispk_data:
  librispeech_dir: /raid/users/popcornell/LibriSpeech # path to LibriSpeech main directory
  output_dir: ./data/librispeech_synth
  num_conversations: 1000 # for debugging purposes
  num_utterances_per_conversation: 30
  num_speakers_per_conversation: [2, 6] # matching AMI
  n_workers: 16
  max_utterance_duration: 60
  min_utterance_duration: 0.1

dataset:
  _target_: espnet3.data.DataOrganizer
  train:
    - name: ami-mdm-train
      dataset:
        _target_: egs3.ami.diar1.dataset.dataset.DiarCutSet
        split: ami-mdm-train
        is_training: True
    - name: ami-ihm-mix-train
      dataset:
        _target_: egs3.ami.diar1.dataset.dataset.DiarCutSet
        split: ami-ihm-mix-train
        is_training: True
  valid:
    - name: ami-sdm-dev
      dataset:
        _target_: egs3.ami.diar1.dataset.dataset.DiarCutSet
        split: ami-sdm-dev
  test:
    - name: ami-sdm-test
      dataset:
        _target_: egs3.ami.diar1.dataset.dataset.DiarCutSet
        split: ami-sdm-test

model:
   _target_: egs3.ami.diar1.model.VanillaEENDModelWrapper
   frontend:
      _target_: egs3.ami.diar1.model.ConvFrontEnd
      n_mels: 23
      in_ksz: 15
      in_stride: 10
      emb_size: 256 # should match encoder and decoder value for internal state
      dropout: 0.2

   encoder:
     _target_: espnet2.asr.encoder.e_branchformer_encoder.EBranchformerEncoder
     input_size: 256
     output_size: 256
     attention_heads: 4
     attention_layer_type: selfattn
     pos_enc_layer_type: conv # no need for pos encoding
     rel_pos_type: latest
     cgmlp_linear_units: 1024
     cgmlp_conv_kernel: 31
     use_linear_after_conv: false
     gate_activation: identity
     num_blocks: 8
     dropout_rate: 0.2
     positional_dropout_rate: 0.1
     attention_dropout_rate: 0.1
     input_layer:
     layer_drop_rate: 0.2
     linear_units: 1024
     positionwise_layer_type: linear
     use_ffn: true
     macaron_ffn: true
     merge_conv_kernel: 31 # this will actually do relative pos encoding

   decoder:
      _target_: egs3.ami.diar1.model.UpSamplingDecoder
      n_local_spk: 5 # note this should be maximum speakers in the dataset !
      emb_size: 256

   lossfunc:
      _target_: egs3.ami.diar1.model.MaskedBinaryXentropyWithLogits
      balance_spk: False

   log_der_train: True # this mainly for debug. remove for speeding up training. #FIXME


optim:
  _target_: torch.optim.Adam
  lr: 0.00005
  weight_decay: 0.000001

scheduler:
  _target_: espnet2.schedulers.warmup_lr.WarmupLR
  warmup_steps: 25000

dataloader:
  collate_fn:
    _target_: espnet2.train.collate_fn.CommonCollateFn
    int_pad_value: -1
  train:
    iter_factory:
      _target_: espnet2.iterators.sequence_iter_factory.SequenceIterFactory
      shuffle: true
      collate_fn: ${dataloader.collate_fn}
      batches:
        _target_: espnet2.samplers.build_batch_sampler.build_batch_sampler
        type: numel
        shape_files:
          - ${statsdir}/train/feats_shape
        batch_size: 32
        batch_bins: 4000000
  valid:
    iter_factory:
      _target_: espnet2.iterators.sequence_iter_factory.SequenceIterFactory
      shuffle: false
      collate_fn: ${dataloader.collate_fn}
      batches:
        _target_: espnet2.samplers.build_batch_sampler.build_batch_sampler
        type: numel
        shape_files:
          - ${statsdir}/valid/feats_shape
        batch_size: 1 # just do inference on whole session in inference by using batch size 1.
        batch_bins: ${dataloader.train.iter_factory.batches.batch_bins}


best_model_criterion:
  - [valid/loss, 3, min]

trainer:
  accelerator: gpu
  devices: ${num_device}
  num_nodes: 1
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  log_every_n_steps: 500
  max_epochs: 80

  logger:
    - _target_: lightning.pytorch.loggers.TensorBoardLogger
      save_dir: ${expdir}/tensorboard
      name: tb_logger

    - _target_: lightning.pytorch.loggers.WandbLogger
      project: ESPnet3 development
      save_dir: ${expdir}/wandb
      name: AMI_EEND

  strategy: auto

test:
  - name: ami-ihm-mix-test
  - name: ami-mdm-test